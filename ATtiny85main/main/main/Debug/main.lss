
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000158  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f7  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046e  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ea  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	34 c0       	rjmp	.+104    	; 0x74 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ec       	ldi	r30, 0xC2	; 194
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 36       	cpi	r26, 0x63	; 99
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	35 c0       	rjmp	.+106    	; 0xbe <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
volatile int8_t step = 1;         // Endringssteg for fading (+ eller -)

int main(void)
{
	// Sett PB0 som utgang
	DDRB |= (1 << DDB0);
  56:	b8 9a       	sbi	0x17, 0	; 23

	TCCR0A |= (1 << WGM00) | (1 << WGM01); // Fast PWM-modus
  58:	8a b5       	in	r24, 0x2a	; 42
  5a:	83 60       	ori	r24, 0x03	; 3
  5c:	8a bd       	out	0x2a, r24	; 42
	TCCR0A |= (1 << COM0A1);               // Clear OC0A på sammenligning, sett på topp
  5e:	8a b5       	in	r24, 0x2a	; 42
  60:	80 68       	ori	r24, 0x80	; 128
  62:	8a bd       	out	0x2a, r24	; 42
	TCCR0B |= (1 << CS01);                 // Sett prescaler til 8 (4 MHz / 8 = 500 kHz PWM)
  64:	83 b7       	in	r24, 0x33	; 51
  66:	82 60       	ori	r24, 0x02	; 2
  68:	83 bf       	out	0x33, r24	; 51

	// Aktiver interrupt på Timer0 overflow
	TIMSK |= (1 << TOIE0);
  6a:	89 b7       	in	r24, 0x39	; 57
  6c:	82 60       	ori	r24, 0x02	; 2
  6e:	89 bf       	out	0x39, r24	; 57

	sei();
  70:	78 94       	sei
  72:	ff cf       	rjmp	.-2      	; 0x72 <main+0x1c>

00000074 <__vector_5>:
		// Hovudløkka gjer ingenting – 
	}
}

ISR(TIMER0_OVF_vect)
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
	brightness += step; // Endre lysstyrken
  82:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  8a:	89 0f       	add	r24, r25
  8c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>

	// Sjekk for topp eller bunn av duty cycle
	if (brightness == 0 || brightness == 255)
  90:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  94:	88 23       	and	r24, r24
  96:	21 f0       	breq	.+8      	; 0xa0 <__vector_5+0x2c>
  98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	29 f4       	brne	.+10     	; 0xaa <__vector_5+0x36>
	{
		step = -step; 
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	81 95       	neg	r24
  a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}

	// Oppdater PWM duty cycle
	OCR0A = brightness;
  aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ae:	89 bd       	out	0x29, r24	; 41
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
