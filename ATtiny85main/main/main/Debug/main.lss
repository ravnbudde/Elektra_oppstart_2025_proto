
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000c6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  0000015c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f7  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046e  00000000  00000000  000006e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f6  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d3  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	30 c0       	rjmp	.+96     	; 0x76 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 ec       	ldi	r30, 0xC6	; 198
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 36       	cpi	r26, 0x63	; 99
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	37 c0       	rjmp	.+110    	; 0xc2 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
volatile uint8_t brightness = 0;  // Duty cycle for PWM
volatile int8_t step = 1;         // Endringssteg for fading (+ eller -)

int main(void)
{
	cli();
  56:	f8 94       	cli
	DDRB |= (1 << DDB0);
  58:	b8 9a       	sbi	0x17, 0	; 23
	// Sett opp Timer0 i CTC-modus, Clear OC0B på sammenligning
	TCCR0A |= (1 << WGM01) | (1 << COM0B1);   
  5a:	8a b5       	in	r24, 0x2a	; 42
  5c:	82 62       	ori	r24, 0x22	; 34
  5e:	8a bd       	out	0x2a, r24	; 42
	      
	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler = 1024  
  60:	83 b7       	in	r24, 0x33	; 51
  62:	85 60       	ori	r24, 0x05	; 5
  64:	83 bf       	out	0x33, r24	; 51
	
	// Sett toppverdi for 50 Hz PWM
	OCR0A = 77; //f_clk/(prescale*PWM_Hz) - 1 = 3906 / 50 - 1 = 77
  66:	8d e4       	ldi	r24, 0x4D	; 77
  68:	89 bd       	out	0x29, r24	; 41
	OCR0B = 0;
  6a:	18 bc       	out	0x28, r1	; 40
	// Aktiver interrupt på Timer0 overflow
	TIMSK |= (1 << TOIE0);
  6c:	89 b7       	in	r24, 0x39	; 57
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	89 bf       	out	0x39, r24	; 57
	sei();
  72:	78 94       	sei
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x1e>

00000076 <__vector_10>:
	{
		// Hovudløkka gjer shit all
	}
}

ISR(TIMER0_COMPA_vect){
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
	brightness += step;
  84:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  8c:	89 0f       	add	r24, r25
  8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>

	// Sjekk for topp eller bunn av duty cycle
	if (brightness == 0 || brightness >= OCR0A)
  92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  96:	88 23       	and	r24, r24
  98:	29 f0       	breq	.+10     	; 0xa4 <__vector_10+0x2e>
  9a:	99 b5       	in	r25, 0x29	; 41
  9c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  a0:	89 17       	cp	r24, r25
  a2:	28 f0       	brcs	.+10     	; 0xae <__vector_10+0x38>
	{
		step = -step;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	81 95       	neg	r24
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}

	// Oppdater PWM duty cycle
	OCR0B = brightness;
  ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  b2:	88 bd       	out	0x28, r24	; 40
}
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
