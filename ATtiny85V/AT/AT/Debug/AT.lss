
AT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000564  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d0  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000229  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	17 c0       	rjmp	.+46     	; 0x5c <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB |= (1<<DDB0);
  30:	b8 9a       	sbi	0x17, 0	; 23
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB |= (1<<PB0);
  32:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  34:	2f e3       	ldi	r18, 0x3F	; 63
  36:	8d e0       	ldi	r24, 0x0D	; 13
  38:	93 e0       	ldi	r25, 0x03	; 3
  3a:	21 50       	subi	r18, 0x01	; 1
  3c:	80 40       	sbci	r24, 0x00	; 0
  3e:	90 40       	sbci	r25, 0x00	; 0
  40:	e1 f7       	brne	.-8      	; 0x3a <main+0xa>
  42:	00 c0       	rjmp	.+0      	; 0x44 <__SREG__+0x5>
  44:	00 00       	nop
		_delay_ms(1000);
		PORTB &= ~(1<<PB0);
  46:	c0 98       	cbi	0x18, 0	; 24
  48:	2f e3       	ldi	r18, 0x3F	; 63
  4a:	8d e0       	ldi	r24, 0x0D	; 13
  4c:	93 e0       	ldi	r25, 0x03	; 3
  4e:	21 50       	subi	r18, 0x01	; 1
  50:	80 40       	sbci	r24, 0x00	; 0
  52:	90 40       	sbci	r25, 0x00	; 0
  54:	e1 f7       	brne	.-8      	; 0x4e <__SREG__+0xf>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
  5a:	eb cf       	rjmp	.-42     	; 0x32 <main+0x2>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
