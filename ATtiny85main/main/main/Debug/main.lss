
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f7  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046e  00000000  00000000  000007c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001fc  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ea       	ldi	r30, 0xA2	; 162
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 36       	cpi	r26, 0x63	; 99
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	a5 c0       	rjmp	.+330    	; 0x19e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:
volatile int8_t step = 1;         // Endringssteg for fading (+ eller -)

int main(void)
{
    // Sett PB1 (OC0B) som utgang
    DDRB |= (1 << DDB1);
  56:	b9 9a       	sbi	0x17, 1	; 23

    // Konfigurer Timer0 i Fast PWM, TOP = OCR0A (Mode 7)
    TCCR0A |= (1 << WGM00) | (1 << WGM01); // Fast PWM
  58:	8a b5       	in	r24, 0x2a	; 42
  5a:	83 60       	ori	r24, 0x03	; 3
  5c:	8a bd       	out	0x2a, r24	; 42
    TCCR0A |= (1 << COM0B1);               // Clear OC0B on Compare Match
  5e:	8a b5       	in	r24, 0x2a	; 42
  60:	80 62       	ori	r24, 0x20	; 32
  62:	8a bd       	out	0x2a, r24	; 42
    TCCR0B |= (1 << WGM02);                // TOP = OCR0A
  64:	83 b7       	in	r24, 0x33	; 51
  66:	88 60       	ori	r24, 0x08	; 8
  68:	83 bf       	out	0x33, r24	; 51
    TCCR0B |= (1 << CS02) | (1 << CS00);   // Prescaler = 1024
  6a:	83 b7       	in	r24, 0x33	; 51
  6c:	85 60       	ori	r24, 0x05	; 5
  6e:	83 bf       	out	0x33, r24	; 51

    // Sett toppverdi for 50 Hz frekvens
    OCR0A = 3; // for 50Hz: f_clk / (prescaler * PWM_freq) - 1 = 3906 / 50 - 1 = 77
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	89 bd       	out	0x29, r24	; 41

    // Sett initial duty cycle
    OCR0B = 0;
  74:	18 bc       	out	0x28, r1	; 40

    // Aktiver overflow interrupt
    TIMSK |= (1 << TOIE0);
  76:	89 b7       	in	r24, 0x39	; 57
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	89 bf       	out	0x39, r24	; 57

    // Aktiver globale interrupt
    sei();
  7c:	78 94       	sei
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x28>

00000080 <__vector_5>:
        // Hovudløkka kan vere tom – fading skjer i interrupt
    }
}

ISR(TIMER0_OVF_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	5f 93       	push	r21
  90:	6f 93       	push	r22
  92:	7f 93       	push	r23
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
  98:	af 93       	push	r26
  9a:	bf 93       	push	r27
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	// Endre lysstyrken gradvis
	brightness += step;
  a0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  a8:	89 0f       	add	r24, r25
  aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>

	// Snu retning ved topp eller bunn
	if (brightness == 0 || brightness >= (255/OCR0A)*255)
  ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  b2:	88 23       	and	r24, r24
  b4:	e9 f0       	breq	.+58     	; 0xf0 <__vector_5+0x70>
  b6:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
  ba:	69 b5       	in	r22, 0x29	; 41
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	45 d0       	rcall	.+138    	; 0x150 <__divmodhi4>
  c6:	cb 01       	movw	r24, r22
  c8:	82 95       	swap	r24
  ca:	92 95       	swap	r25
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	98 27       	eor	r25, r24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	98 27       	eor	r25, r24
  d4:	86 1b       	sub	r24, r22
  d6:	97 0b       	sbc	r25, r23
  d8:	9c 01       	movw	r18, r24
  da:	22 95       	swap	r18
  dc:	32 95       	swap	r19
  de:	30 7f       	andi	r19, 0xF0	; 240
  e0:	32 27       	eor	r19, r18
  e2:	20 7f       	andi	r18, 0xF0	; 240
  e4:	32 27       	eor	r19, r18
  e6:	82 0f       	add	r24, r18
  e8:	93 1f       	adc	r25, r19
  ea:	e8 17       	cp	r30, r24
  ec:	f9 07       	cpc	r31, r25
  ee:	2c f0       	brlt	.+10     	; 0xfa <__vector_5+0x7a>
	{
		step = -step;
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	81 95       	neg	r24
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	// kan maks scale OCR0A*brightness = 255 => brightness = 255/OCR0A
	// Oppdater duty cycle
	OCR0B = (OCR0A * brightness) / 255; // Duty cycle i prosent av OCR0A
  fa:	89 b5       	in	r24, 0x29	; 41
  fc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	14 d0       	rcall	.+40     	; 0x12e <__mulhi3>
 106:	6f ef       	ldi	r22, 0xFF	; 255
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	22 d0       	rcall	.+68     	; 0x150 <__divmodhi4>
 10c:	68 bd       	out	0x28, r22	; 40
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	7f 91       	pop	r23
 11c:	6f 91       	pop	r22
 11e:	5f 91       	pop	r21
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__mulhi3>:
 12e:	00 24       	eor	r0, r0
 130:	55 27       	eor	r21, r21
 132:	04 c0       	rjmp	.+8      	; 0x13c <__mulhi3+0xe>
 134:	08 0e       	add	r0, r24
 136:	59 1f       	adc	r21, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	29 f0       	breq	.+10     	; 0x14a <__mulhi3+0x1c>
 140:	76 95       	lsr	r23
 142:	67 95       	ror	r22
 144:	b8 f3       	brcs	.-18     	; 0x134 <__mulhi3+0x6>
 146:	71 05       	cpc	r23, r1
 148:	b9 f7       	brne	.-18     	; 0x138 <__mulhi3+0xa>
 14a:	80 2d       	mov	r24, r0
 14c:	95 2f       	mov	r25, r21
 14e:	08 95       	ret

00000150 <__divmodhi4>:
 150:	97 fb       	bst	r25, 7
 152:	07 2e       	mov	r0, r23
 154:	16 f4       	brtc	.+4      	; 0x15a <__divmodhi4+0xa>
 156:	00 94       	com	r0
 158:	06 d0       	rcall	.+12     	; 0x166 <__divmodhi4_neg1>
 15a:	77 fd       	sbrc	r23, 7
 15c:	08 d0       	rcall	.+16     	; 0x16e <__divmodhi4_neg2>
 15e:	0b d0       	rcall	.+22     	; 0x176 <__udivmodhi4>
 160:	07 fc       	sbrc	r0, 7
 162:	05 d0       	rcall	.+10     	; 0x16e <__divmodhi4_neg2>
 164:	3e f4       	brtc	.+14     	; 0x174 <__divmodhi4_exit>

00000166 <__divmodhi4_neg1>:
 166:	90 95       	com	r25
 168:	81 95       	neg	r24
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	08 95       	ret

0000016e <__divmodhi4_neg2>:
 16e:	70 95       	com	r23
 170:	61 95       	neg	r22
 172:	7f 4f       	sbci	r23, 0xFF	; 255

00000174 <__divmodhi4_exit>:
 174:	08 95       	ret

00000176 <__udivmodhi4>:
 176:	aa 1b       	sub	r26, r26
 178:	bb 1b       	sub	r27, r27
 17a:	51 e1       	ldi	r21, 0x11	; 17
 17c:	07 c0       	rjmp	.+14     	; 0x18c <__udivmodhi4_ep>

0000017e <__udivmodhi4_loop>:
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	a6 17       	cp	r26, r22
 184:	b7 07       	cpc	r27, r23
 186:	10 f0       	brcs	.+4      	; 0x18c <__udivmodhi4_ep>
 188:	a6 1b       	sub	r26, r22
 18a:	b7 0b       	sbc	r27, r23

0000018c <__udivmodhi4_ep>:
 18c:	88 1f       	adc	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	5a 95       	dec	r21
 192:	a9 f7       	brne	.-22     	; 0x17e <__udivmodhi4_loop>
 194:	80 95       	com	r24
 196:	90 95       	com	r25
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
